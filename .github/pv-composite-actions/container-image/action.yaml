name: 'container_image'
description: 'build and push the image to ecr'
inputs:
  service_name:
    description: 'Name of the service calling this composite action'
    required: true
  environment: 
    description: 'Name of the environment to be push the image'
    required: true
  image_tag:
    description: 'Container image tag name'
    required: true
    default: "lkgb"
  ecr_registry:
    description: 'ECR registry name to respective environment'
    required: true
  aws_access_key:
    description: 'Valid aws access key'
    required: true
  aws_secret_key:
    description: 'Valid aws secret key'
    required: true
  aws_region:
    description: 'AWS region to be set for cli operations' # Not mandatory because multi region deployment happens only in production.
  aws_codeartifact_domain:
    description: 'AWS Code Artifact domain'
    required: true
  aws_codeartifact_domain_owner:
    description: 'Domain owner name'
    required: true
  aws_session_token:
    required: true

env:
  code_artifact_uri: 'platforma-323341875315.d.codeartifact.us-west-2.amazonaws.com'
  dockerfile_path: './Dockerfile'

runs:
  using: "composite"
  steps:
    # Check for ecr repository
    - name: ECR validation
      id: ecr-validator
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_key }}
        AWS_SESSION_TOKEN: ${{ inputs.aws_session_token }}
        AWS_DEFAULT_REGION: 'us-west-2'
        ECR_REPOSITORY: ${{ inputs.service_name }} # repository name = service_name
      run: |
        IMAGE_META="$( aws ecr describe-images --repository-name=${ECR_REPOSITORY} )"
        if [[ $? == 0 ]]; then
            IMAGE_TAG=$( echo ${IMAGE_META} | jq '.imageDetails[0].imageTags[0]' -r )
            echo "Found Image with the name ${ECR_REPOSITORY} and the current tag is $IMAGE_TAG"
        fi
      shell: bash

    - name: outputs
      run: |
        echo "Service Name - ${{ inputs.service_name }}"
        echo "Env - ${{ inputs.environment }}"
        echo "ECR Repo - ${{ inputs.ecr_registry }}"
        echo "Image tag - ${{ inputs.image_tag }}"
      shell: bash

    # build and push the image to ecr
    # - name: push image to aws ecr
    #   id: aws-ecr
    #   uses: aws-actions/amazon-ecr-login@v1
    #   env: 
    #     ECR_REGISTRY: ${{ inputs.ecr_registry }}
    #     ECR_REPOSITORY: ${{ inputs.service_name }} # repository name = service_name
    #     IMAGE_TAG: ${{ inputs.image_tag }}
    #   run: |
    #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ${dockerfile_path}
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
