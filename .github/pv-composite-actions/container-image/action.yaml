name: 'container_image'
description: 'build and push the image to ecr'
# inputs:
#   service_name:
#     description: 'Name of the service calling this composite action'
#     required: true
#   environment: 
#     description: 'Name of the environment to be push the image'
#     required: true
#   image_name: 
#     description: 'Name of the image being created'
#     required: true
#   image_tag:
#     description: 'Default tag name'
#     required: true
#     default: "latest"
#   ecr_registry: # Create a condition and harcode the values here itself.
#     description: 'ECR registry name'
#     required: true
#   ecr_repository:
#     description: 'ECR repository name'
#     required: true
#   dockerfile_path:
#     description: 'Declare path from root to the Dockerfile'
#     required: true
#     default: './Dockerfile'
#   context:
#     description: 'Declare contextual path from root to the proper directory'
#     required: true
#     default: '.'
#   aws_access_key:
#     description: 'Valid aws access key'
#     required: true
#   aws_secret_key:
#     description: 'Valid aws secret key'
#     required: true

inputs:
  aws_access_key:
    required: true
  aws_secret_key:
    required: true
  session_token:
    required: true
  repository_name:
    required: true

runs:
  using: "composite"
  steps:
    # - uses: actions/checkout@v2
    #   with:
    #     fetch-depth: 0
    # - uses: actions/setup-python@v2.2.2
    #   with:
    #     python-version: 3.9
    # - uses: Gr1N/setup-poetry@v8
    # - uses: actions/cache@v2.1.6
    #   with:
    #     path: .venv
    #     key: ${{runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
    # - name: Configure AWS Credentials
    #   uses: aws-actions/configure-aws-credentials@v1
    #   with:
    #     aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID_PRODUCTION_US_WEST_2 }}
    #     aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY_PRODUCTION_US_WEST_2 }}
    #     aws-region: ${{secrets.AWS_REGION_PRODUCTION_US_WEST_2 }}
    # - name: Get AWS Code Artifact token
    #   run: >-
    #     echo "POETRY_HTTP_BASIC_PLATFORMA_PASSWORD=$(aws
    #     codeartifact
    #     get-authorization-token
    #     --domain $AWS_CODEARTIFACT_DOMAIN
    #     --domain-owner $AWS_CODEARTIFACT_DOMAIN_OWNER
    #     --query authorizationToken
    #     --output text)"
    #     >> $GITHUB_ENV
    # - name: Install platforma-invocations
    #   run: >-
    #     pip install
    #     --extra-index-url https://aws:$POETRY_HTTP_BASIC_PLATFORMA_PASSWORD@platforma-323341875315.d.codeartifact.us-west-2.amazonaws.com/pypi/platforma/simple/
    #     platforma-invocations

    # Check for ecr repository
    - name: ECR validation
      id: ecr-validator
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_key }}
        AWS_SESSION_TOKEN: ${{ inputs.session_token }}
        AWS_DEFAULT_REGION: 'us-west-2'
      run: |
        IMAGE_META="$( aws ecr describe-images --repository-name=${{ inputs.repository_name }} )"
        if [[ $? == 0 ]]; then
            IMAGE_TAG=$( echo ${IMAGE_META} | jq '.imageDetails[0].imageTags[0]' -r )
            echo "Found Image with the name ${{ inputs.repository_name }} and the current tag is $IMAGE_TAG"
        else
            echo "repository with the name ${{ inputs.repository_name }} not"
            exit 1
        fi
      shell: bash

    # build and push the image to ecr
    # - name: Login to Amazon ECR
    #   id: login-ecr
    #   uses: aws-actions/amazon-ecr-login@v1
    #   # environment variables specific to ecr
    #   env: 
    #     ECR_REGISTRY: ${{ inputs.ecr_registry }}
    #     ECR_REPOSITORY: ${{ inputs.service_name }} # repository name = service_name
    #     IMAGE_TAG: ${{ inputs.image_tag }}
    #   run: |
    #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ${{ inputs.dockerfile_path}}
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG